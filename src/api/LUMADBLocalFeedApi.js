/**
 * Onepanel
 * # Overview  This is the RESTful API definition of **Onepanel** component of Onedata data management system [onedata.org](http://onedata.org).  > This API is defined using [Swagger](http://swagger.io/), the JSON specification can be used to automatically generate client libraries -   [swagger.json](../../../swagger/onepanel/swagger.json).  This API allows control and configuration of local Onedata deployment, in particular full control over the **Onezone** and **Oneprovider** services and their distribution and monitoring on the local resources.  The API is grouped into 3 categories of operations:   * **Onepanel** - for common operations   * **Oneprovider** - for Oneprovider specific administrative operations   * **Onezone** - for Onezone specific administrative operations  Each of these components is composed of the following services:   * **Worker services** - these are available under `/zone/workers` and     `/provider/workers` paths,   * **Databases services** - each Onedata component stores it's metadata in a     Couchbase backend, which can be distributed on any number of nodes, these     are available under `/zone/databases` and `/provider/databases` paths,   * **Cluster manager services** - this is a service which controls other     deployed processes in one site, these are availables under these are     available under `/zone/managers` and `/provider/managers` paths.  **Onezone** and **Oneprovider** components are composed of 3 types of services: **managers**, **databases** and **workers**.  Using this API each of these components can be deployed, configured, started and stopped on a specified host in the local site, in the context of either **Onezone** or **Oneprovider** service.  All paths listed in this documentation are relative to the base Onepanel REST API which is `/api/v3/onepanel`, so complete URL for a request to Onepanel service is:  ``` http://HOSTNAME:PORT/api/v3/onepanel/... ```  ## Authentication  ### Token authentication  The recommended, safest way of authenticating requests to Onepanel API is using the **Onedata access tokens**. The token should be present in `X-Auth-Token` or `Authorization: Bearer` header. See [Onezone documentation](/#/home/api/latest/onezone?anchor=section/Overview/Authentication-and-authorization) for detailed explanation of the token concepts.  Curl examples: ```bash curl -H \"X-Auth-Token: $TOKEN\" [...] curl -H \"Authorization: Bearer $TOKEN\" [...] curl -H \"Macaroon: $TOKEN\" [...]   # DEPRECATED ```   ### Passphrase authentication  The token authentication dependes on the Onezone service. In special cases - during Onezone deployment or its outage - it is necessary to use the local **emergency passphrase**.  The passphrase should be provided in a Basic authentication header with username `onepanel`. For curl users this means ```bash curl -u onepanel:TheEmergencyPassphrase ```  The passphrase can also be sent without any username, as the whole content of base64-encoded string in Basic authorization header, e.g. ```bash curl -H \"Authorization: Basic $(echo -n TheEmergencyPassphrase | base64)\" ```  The passphrase is set during deployment. It can be changed in the Onepanel GUI or with an API request: ```bash curl -X PUT 'https://$PANEL_HOST:9443/api/v3/onepanel/emergency_passphrase' \\ -u onepanel:TheEmergencyPassphrase -H 'Content-Type: application/json' \\ -d '{\"currentPassphrase\": \"TheEmergencyPassphrase\", \"newPassphrase\": \"TheNewPassphrase\"}' ```  ## API structure  The Onepanel API is structured to reflect that it can either be used to control **Onezone** or **Oneprovider** deployment, each Onedata component deployment has a separate Onepanel instance. In order to make the API calls explicit, **Onezone** or **Oneprovider** specific requests have different paths, i.e.:   * Onezone specific operations start with `/api/v3/onepanel/zone/`   * Oneprovider specific operations start with `/api/v3/onepanel/provider/`   * Common operations paths include `/api/v3/onepanel/users`,     `/api/v3/onepanel/hosts` and `/api/v3/onepanel/tasks`  The overall configuration of each component can be controlled by updating `/api/v3/onepanel/zone/configuration` and `/api/v3/onepanel/provider/configuration` resources.  ## Examples  Below are some example requests to Onepanel using cURL:  **Add storage resource to provider** ```bash curl -X POST -u onepanel:Passphrase1 -k -vvv -H \"content-type: application/json\" \\ -d '{\"NFS\": {\"type\": \"posix\", \"mountPoint\": \"/mnt/vfs\"}}' \\ https://172.17.0.4:9443/api/v3/onepanel/provider/storages ```  **Add a new Onezone worker** ```bash curl -X POST -u onepanel:Passphrase1 -k -vvv -H \"content-type: application/json\" \\ -d '{\"hosts\": [\"node1.p1.1.dev\"]}' \\ https://172.17.0.4:9443/api/v3/onepanel/zone/workers ``` 
 *
 * OpenAPI spec version: 21.02.0-alpha22
 * Contact: info@onedata.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Error', 'model/LumaOnedataGroup', 'model/LumaOnedataUser', 'model/LumaStorageUser', 'model/LumaUserMapping', 'model/PosixCompatibleCredentials'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Error'), require('../model/LumaOnedataGroup'), require('../model/LumaOnedataUser'), require('../model/LumaStorageUser'), require('../model/LumaUserMapping'), require('../model/PosixCompatibleCredentials'));
  } else {
    // Browser globals (root is window)
    if (!root.Onepanel) {
      root.Onepanel = {};
    }
    root.Onepanel.LUMADBLocalFeedApi = factory(root.Onepanel.ApiClient, root.Onepanel.Error, root.Onepanel.LumaOnedataGroup, root.Onepanel.LumaOnedataUser, root.Onepanel.LumaStorageUser, root.Onepanel.LumaUserMapping, root.Onepanel.PosixCompatibleCredentials);
  }
}(this, function(ApiClient, Error, LumaOnedataGroup, LumaOnedataUser, LumaStorageUser, LumaUserMapping, PosixCompatibleCredentials) {
  'use strict';

  /**
   * LUMADBLocalFeed service.
   * @module api/LUMADBLocalFeedApi
   * @version 21.02.0-alpha22
   */

  /**
   * Constructs a new LUMADBLocalFeedApi. 
   * @alias module:api/LUMADBLocalFeedApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the localFeedAddOnedataUserToCredentialsMapping operation.
     * @callback module:api/LUMADBLocalFeedApi~localFeedAddOnedataUserToCredentialsMappingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert Onedata user to credentials mapping into local feed
     * Adds mapping of Onedata user to user on the specific storage to local feed. Returns an error if the storage has a different LUMA feed than &#x60;local&#x60;. 
     * @param {String} id The Id of a storage for which user mapping should be added. 
     * @param {module:model/LumaUserMapping} userMapping New user mapping 
     * @param {module:api/LUMADBLocalFeedApi~localFeedAddOnedataUserToCredentialsMappingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.localFeedAddOnedataUserToCredentialsMapping = function(id, userMapping, callback) {
      var postBody = userMapping;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling localFeedAddOnedataUserToCredentialsMapping");
      }

      // verify the required parameter 'userMapping' is set
      if (userMapping === undefined || userMapping === null) {
        throw new Error("Missing the required parameter 'userMapping' when calling localFeedAddOnedataUserToCredentialsMapping");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key1', 'api_key2', 'basic'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/provider/storages/{id}/luma/local_feed/storage_access/all/onedata_user_to_credentials', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the localFeedGetAclGroupToOnedataGroupMapping operation.
     * @callback module:api/LUMADBLocalFeedApi~localFeedGetAclGroupToOnedataGroupMappingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LumaOnedataGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lookup mapping of ACL group in local feed
     * Returns mapping of ACL group on the specific storage to Onedata group defined in local feed. Returns an error if the storage has a different LUMA feed than &#x60;local&#x60;. This endpoint is relevant **only for POSIX compatible storages**. 
     * @param {String} id The Id of a storage constituting space support for which onedata group mapping should be returned. 
     * @param {Number} groupname The ACL name of the group on the storage. 
     * @param {module:api/LUMADBLocalFeedApi~localFeedGetAclGroupToOnedataGroupMappingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LumaOnedataGroup}
     */
    this.localFeedGetAclGroupToOnedataGroupMapping = function(id, groupname, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling localFeedGetAclGroupToOnedataGroupMapping");
      }

      // verify the required parameter 'groupname' is set
      if (groupname === undefined || groupname === null) {
        throw new Error("Missing the required parameter 'groupname' when calling localFeedGetAclGroupToOnedataGroupMapping");
      }


      var pathParams = {
        'id': id,
        'groupname': groupname
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key1', 'api_key2', 'basic'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = LumaOnedataGroup;

      return this.apiClient.callApi(
        '/provider/storages/{id}/luma/local_feed/storage_import/posix_compatible/acl_group_to_onedata_group/{groupname}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the localFeedGetAclUserToOnedataUserMapping operation.
     * @callback module:api/LUMADBLocalFeedApi~localFeedGetAclUserToOnedataUserMappingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LumaOnedataUser} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lookup mapping of ACL user in local feed
     * Returns mapping of ACL user on the specific storage to Onedata user defined in local feed. Returns an error if the storage has a different LUMA feed than &#x60;local&#x60;. This endpoint is relevant **only for POSIX compatible storages**. 
     * @param {String} id The Id of a storage constituting space support for which onedata user mapping should be returned. 
     * @param {Number} username The ACL name of the user on the storage. 
     * @param {module:api/LUMADBLocalFeedApi~localFeedGetAclUserToOnedataUserMappingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LumaOnedataUser}
     */
    this.localFeedGetAclUserToOnedataUserMapping = function(id, username, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling localFeedGetAclUserToOnedataUserMapping");
      }

      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling localFeedGetAclUserToOnedataUserMapping");
      }


      var pathParams = {
        'id': id,
        'username': username
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key1', 'api_key2', 'basic'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = LumaOnedataUser;

      return this.apiClient.callApi(
        '/provider/storages/{id}/luma/local_feed/storage_import/posix_compatible/acl_user_to_onedata_user/{username}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the localFeedGetDefaultPosixCredentials operation.
     * @callback module:api/LUMADBLocalFeedApi~localFeedGetDefaultPosixCredentialsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PosixCompatibleCredentials} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lookup default posix credentials in local feed
     * Returns default storage credentials for the space supported by POSIX-compatible storage that are defined in local feed. GID will be used as a component of storage credentials for each member of the space. Both UID and GID will be used as to represent owner of the space directory on storage. Returns an error if the storage has a different LUMA feed than &#x60;local&#x60;. This endpoint is relevant **only for POSIX compatible storages**. 
     * @param {String} id The Id of a storage constituting space support for which default storage credentials should be returned. 
     * @param {String} spaceId The Id of a space constituting space support for which default storage credentials should be returned. 
     * @param {module:api/LUMADBLocalFeedApi~localFeedGetDefaultPosixCredentialsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PosixCompatibleCredentials}
     */
    this.localFeedGetDefaultPosixCredentials = function(id, spaceId, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling localFeedGetDefaultPosixCredentials");
      }

      // verify the required parameter 'spaceId' is set
      if (spaceId === undefined || spaceId === null) {
        throw new Error("Missing the required parameter 'spaceId' when calling localFeedGetDefaultPosixCredentials");
      }


      var pathParams = {
        'id': id,
        'space_id': spaceId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key1', 'api_key2', 'basic'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PosixCompatibleCredentials;

      return this.apiClient.callApi(
        '/provider/storages/{id}/luma/local_feed/storage_access/posix_compatible/default_credentials/{space_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the localFeedGetDisplayCredentials operation.
     * @callback module:api/LUMADBLocalFeedApi~localFeedGetDisplayCredentialsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PosixCompatibleCredentials} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lookup default display credentials in local feed
     * Returns default display credentials for the space support that are defined in local feed. These are POSIX credentials (UID &amp; GID) which are returned in getattr response. They are used to present file owners in the result of e.g. &#x60;ls&#x60; or &#x60;stat&#x60; operation in Oneclient or when fetching file attributes via REST API. Returns an error if the storage has a different LUMA feed than &#x60;local&#x60;. 
     * @param {String} id The Id of a storage constituting space support for which default display credentials should be returned. 
     * @param {String} spaceId The Id of a space constituting space support for which default display credentials should be returned. 
     * @param {module:api/LUMADBLocalFeedApi~localFeedGetDisplayCredentialsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PosixCompatibleCredentials}
     */
    this.localFeedGetDisplayCredentials = function(id, spaceId, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling localFeedGetDisplayCredentials");
      }

      // verify the required parameter 'spaceId' is set
      if (spaceId === undefined || spaceId === null) {
        throw new Error("Missing the required parameter 'spaceId' when calling localFeedGetDisplayCredentials");
      }


      var pathParams = {
        'id': id,
        'space_id': spaceId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key1', 'api_key2', 'basic'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PosixCompatibleCredentials;

      return this.apiClient.callApi(
        '/provider/storages/{id}/luma/local_feed/display_credentials/all/default/{space_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the localFeedGetOnedataUserToCredentialsMapping operation.
     * @callback module:api/LUMADBLocalFeedApi~localFeedGetOnedataUserToCredentialsMappingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LumaStorageUser} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lookup Onedata user to credentials mapping in local feed
     * Returns mapping of the Onedata user to user on the specific storage defined in local feed. Returns an error if the storage has a different LUMA feed than &#x60;local&#x60;. 
     * @param {String} id The Id of a storage for which user mapping should be returned. 
     * @param {String} onedataUserId The Id of a user for which mapping should be returned. 
     * @param {module:api/LUMADBLocalFeedApi~localFeedGetOnedataUserToCredentialsMappingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LumaStorageUser}
     */
    this.localFeedGetOnedataUserToCredentialsMapping = function(id, onedataUserId, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling localFeedGetOnedataUserToCredentialsMapping");
      }

      // verify the required parameter 'onedataUserId' is set
      if (onedataUserId === undefined || onedataUserId === null) {
        throw new Error("Missing the required parameter 'onedataUserId' when calling localFeedGetOnedataUserToCredentialsMapping");
      }


      var pathParams = {
        'id': id,
        'onedata_user_id': onedataUserId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key1', 'api_key2', 'basic'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = LumaStorageUser;

      return this.apiClient.callApi(
        '/provider/storages/{id}/luma/local_feed/storage_access/all/onedata_user_to_credentials/{onedata_user_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the localFeedGetUidToOnedataUserMapping operation.
     * @callback module:api/LUMADBLocalFeedApi~localFeedGetUidToOnedataUserMappingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LumaOnedataUser} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lookup mapping of UID in local feed
     * Returns mapping of UID on the specific storage to Onedata user defined in local feed. Returns an error if the storage has a different LUMA feed than &#x60;local&#x60;. This endpoint is relevant **only for POSIX compatible storages**. 
     * @param {String} id The Id of a storage constituting space support for which onedata user mapping should be returned. 
     * @param {Number} uid The UID of the user on the storage. 
     * @param {module:api/LUMADBLocalFeedApi~localFeedGetUidToOnedataUserMappingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LumaOnedataUser}
     */
    this.localFeedGetUidToOnedataUserMapping = function(id, uid, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling localFeedGetUidToOnedataUserMapping");
      }

      // verify the required parameter 'uid' is set
      if (uid === undefined || uid === null) {
        throw new Error("Missing the required parameter 'uid' when calling localFeedGetUidToOnedataUserMapping");
      }


      var pathParams = {
        'id': id,
        'uid': uid
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key1', 'api_key2', 'basic'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = LumaOnedataUser;

      return this.apiClient.callApi(
        '/provider/storages/{id}/luma/local_feed/storage_import/posix_compatible/uid_to_onedata_user/{uid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the localFeedModifyOnedataUserToCredentialsMapping operation.
     * @callback module:api/LUMADBLocalFeedApi~localFeedModifyOnedataUserToCredentialsMappingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Onedata user to credentials mapping in local feed
     * Modifies mapping of the Onedata user to user on the specific storage in local feed. Returns an error if the storage has a different LUMA feed than &#x60;local&#x60;. 
     * @param {String} id The Id of a storage for which user mapping should be updated. 
     * @param {String} onedataUserId The Id of a user for which mapping should be updated. 
     * @param {module:model/LumaStorageUser} storageUser New user mapping 
     * @param {module:api/LUMADBLocalFeedApi~localFeedModifyOnedataUserToCredentialsMappingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.localFeedModifyOnedataUserToCredentialsMapping = function(id, onedataUserId, storageUser, callback) {
      var postBody = storageUser;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling localFeedModifyOnedataUserToCredentialsMapping");
      }

      // verify the required parameter 'onedataUserId' is set
      if (onedataUserId === undefined || onedataUserId === null) {
        throw new Error("Missing the required parameter 'onedataUserId' when calling localFeedModifyOnedataUserToCredentialsMapping");
      }

      // verify the required parameter 'storageUser' is set
      if (storageUser === undefined || storageUser === null) {
        throw new Error("Missing the required parameter 'storageUser' when calling localFeedModifyOnedataUserToCredentialsMapping");
      }


      var pathParams = {
        'id': id,
        'onedata_user_id': onedataUserId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key1', 'api_key2', 'basic'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/provider/storages/{id}/luma/local_feed/storage_access/all/onedata_user_to_credentials/{onedata_user_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the localFeedRemoveAclGroupToOnedataGroupMapping operation.
     * @callback module:api/LUMADBLocalFeedApi~localFeedRemoveAclGroupToOnedataGroupMappingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove mapping of ACL group from local feed
     * Removes mapping of ACL group on the specific storage to Onedata group from local feed. Returns an error if the storage has a different LUMA feed than &#x60;local&#x60;. This endpoint is relevant **only for POSIX compatible storages**. 
     * @param {String} id The Id of a storage constituting space support for which onedata group mapping should be removed. 
     * @param {Number} groupname The ACL name of the group on the storage. 
     * @param {module:api/LUMADBLocalFeedApi~localFeedRemoveAclGroupToOnedataGroupMappingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.localFeedRemoveAclGroupToOnedataGroupMapping = function(id, groupname, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling localFeedRemoveAclGroupToOnedataGroupMapping");
      }

      // verify the required parameter 'groupname' is set
      if (groupname === undefined || groupname === null) {
        throw new Error("Missing the required parameter 'groupname' when calling localFeedRemoveAclGroupToOnedataGroupMapping");
      }


      var pathParams = {
        'id': id,
        'groupname': groupname
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key1', 'api_key2', 'basic'];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/provider/storages/{id}/luma/local_feed/storage_import/posix_compatible/acl_group_to_onedata_group/{groupname}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the localFeedRemoveAclUserToOnedataUserMapping operation.
     * @callback module:api/LUMADBLocalFeedApi~localFeedRemoveAclUserToOnedataUserMappingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove mapping of ACL user from local feed
     * Removes mapping of ACL user on the specific storage to Onedata user from local feed. Returns an error if the storage has a different LUMA feed than &#x60;local&#x60;. This endpoint is relevant **only for POSIX compatible storages**. 
     * @param {String} id The Id of a storage constituting space support for which onedata user mapping should be removed. 
     * @param {Number} username The ACL name of the user on the storage. 
     * @param {module:api/LUMADBLocalFeedApi~localFeedRemoveAclUserToOnedataUserMappingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.localFeedRemoveAclUserToOnedataUserMapping = function(id, username, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling localFeedRemoveAclUserToOnedataUserMapping");
      }

      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling localFeedRemoveAclUserToOnedataUserMapping");
      }


      var pathParams = {
        'id': id,
        'username': username
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key1', 'api_key2', 'basic'];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/provider/storages/{id}/luma/local_feed/storage_import/posix_compatible/acl_user_to_onedata_user/{username}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the localFeedRemoveDefaultPosixCredentials operation.
     * @callback module:api/LUMADBLocalFeedApi~localFeedRemoveDefaultPosixCredentialsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove default posix credentials from local feed
     * Removes default storage credentials for the space supported by POSIX-compatible storage from local feed. Returns an error if the storage has a different LUMA feed than &#x60;local&#x60;. This endpoint is relevant **only for POSIX compatible storages**. 
     * @param {String} id The Id of a storage constituting space support for which default storage credentials should be removed. 
     * @param {String} spaceId The Id of a space constituting space support for which default storage credentials should be removed. 
     * @param {module:api/LUMADBLocalFeedApi~localFeedRemoveDefaultPosixCredentialsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.localFeedRemoveDefaultPosixCredentials = function(id, spaceId, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling localFeedRemoveDefaultPosixCredentials");
      }

      // verify the required parameter 'spaceId' is set
      if (spaceId === undefined || spaceId === null) {
        throw new Error("Missing the required parameter 'spaceId' when calling localFeedRemoveDefaultPosixCredentials");
      }


      var pathParams = {
        'id': id,
        'space_id': spaceId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key1', 'api_key2', 'basic'];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/provider/storages/{id}/luma/local_feed/storage_access/posix_compatible/default_credentials/{space_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the localFeedRemoveDisplayCredentials operation.
     * @callback module:api/LUMADBLocalFeedApi~localFeedRemoveDisplayCredentialsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove default display credentials from local feed
     * Removes default display credentials for the space support from local feed. Returns an error if the storage has a different LUMA feed than &#x60;local&#x60;. 
     * @param {String} id The Id of a storage constituting space support for which default display credentials should be removed. 
     * @param {String} spaceId The Id of a space constituting space support for which default display credentials should be removed. 
     * @param {module:api/LUMADBLocalFeedApi~localFeedRemoveDisplayCredentialsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.localFeedRemoveDisplayCredentials = function(id, spaceId, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling localFeedRemoveDisplayCredentials");
      }

      // verify the required parameter 'spaceId' is set
      if (spaceId === undefined || spaceId === null) {
        throw new Error("Missing the required parameter 'spaceId' when calling localFeedRemoveDisplayCredentials");
      }


      var pathParams = {
        'id': id,
        'space_id': spaceId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key1', 'api_key2', 'basic'];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/provider/storages/{id}/luma/local_feed/display_credentials/all/default/{space_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the localFeedRemoveOnedataUserToCredentialsMapping operation.
     * @callback module:api/LUMADBLocalFeedApi~localFeedRemoveOnedataUserToCredentialsMappingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove Onedata user to credentials mapping from local feed
     * Removes mapping of the Onedata user to user on the specific storage local feed. Returns an error if the storage has a different LUMA feed than &#x60;local&#x60;. 
     * @param {String} id The Id of a storage for which user mapping should be removed. 
     * @param {String} onedataUserId The Id of a user for which mapping should be removed. 
     * @param {module:api/LUMADBLocalFeedApi~localFeedRemoveOnedataUserToCredentialsMappingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.localFeedRemoveOnedataUserToCredentialsMapping = function(id, onedataUserId, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling localFeedRemoveOnedataUserToCredentialsMapping");
      }

      // verify the required parameter 'onedataUserId' is set
      if (onedataUserId === undefined || onedataUserId === null) {
        throw new Error("Missing the required parameter 'onedataUserId' when calling localFeedRemoveOnedataUserToCredentialsMapping");
      }


      var pathParams = {
        'id': id,
        'onedata_user_id': onedataUserId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key1', 'api_key2', 'basic'];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/provider/storages/{id}/luma/local_feed/storage_access/all/onedata_user_to_credentials/{onedata_user_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the localFeedRemoveUidToOnedataUserMapping operation.
     * @callback module:api/LUMADBLocalFeedApi~localFeedRemoveUidToOnedataUserMappingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove mapping of UID from local feed
     * Removes mapping of UID on the specific storage to Onedata user from local feed. Returns an error if the storage has a different LUMA feed than &#x60;local&#x60;. This endpoint is relevant **only for POSIX compatible storages**. 
     * @param {String} id The Id of a storage constituting space support for which onedata user mapping should be removed. 
     * @param {Number} uid The UID of the user on the storage. 
     * @param {module:api/LUMADBLocalFeedApi~localFeedRemoveUidToOnedataUserMappingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.localFeedRemoveUidToOnedataUserMapping = function(id, uid, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling localFeedRemoveUidToOnedataUserMapping");
      }

      // verify the required parameter 'uid' is set
      if (uid === undefined || uid === null) {
        throw new Error("Missing the required parameter 'uid' when calling localFeedRemoveUidToOnedataUserMapping");
      }


      var pathParams = {
        'id': id,
        'uid': uid
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key1', 'api_key2', 'basic'];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/provider/storages/{id}/luma/local_feed/storage_import/posix_compatible/uid_to_onedata_user/{uid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the localFeedSetAclGroupToOnedataGroupMapping operation.
     * @callback module:api/LUMADBLocalFeedApi~localFeedSetAclGroupToOnedataGroupMappingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert mapping of ACL group into local feed
     * Sets mapping of ACL group on the specific storage to Onedata group in local feed. Returns an error if the storage has a different LUMA feed than &#x60;local&#x60;. This endpoint is relevant **only for POSIX compatible storages**. 
     * @param {String} id The Id of a storage constituting space support for which onedata group mapping should be set. 
     * @param {Number} groupname The ACL name of the group on the storage. 
     * @param {module:model/LumaOnedataGroup} lumaOnedataGroup Credentials identifying group in the Onedata system.
     * @param {module:api/LUMADBLocalFeedApi~localFeedSetAclGroupToOnedataGroupMappingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.localFeedSetAclGroupToOnedataGroupMapping = function(id, groupname, lumaOnedataGroup, callback) {
      var postBody = lumaOnedataGroup;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling localFeedSetAclGroupToOnedataGroupMapping");
      }

      // verify the required parameter 'groupname' is set
      if (groupname === undefined || groupname === null) {
        throw new Error("Missing the required parameter 'groupname' when calling localFeedSetAclGroupToOnedataGroupMapping");
      }

      // verify the required parameter 'lumaOnedataGroup' is set
      if (lumaOnedataGroup === undefined || lumaOnedataGroup === null) {
        throw new Error("Missing the required parameter 'lumaOnedataGroup' when calling localFeedSetAclGroupToOnedataGroupMapping");
      }


      var pathParams = {
        'id': id,
        'groupname': groupname
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key1', 'api_key2', 'basic'];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/provider/storages/{id}/luma/local_feed/storage_import/posix_compatible/acl_group_to_onedata_group/{groupname}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the localFeedSetAclUserToOnedataUserMapping operation.
     * @callback module:api/LUMADBLocalFeedApi~localFeedSetAclUserToOnedataUserMappingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert mapping of ACL user into local feed
     * Sets mapping of ACL user on the specific storage to Onedata user in local feed. Returns an error if the storage has a different LUMA feed than &#x60;local&#x60;. This endpoint is relevant **only for POSIX compatible storages**. 
     * @param {String} id The Id of a storage constituting space support for for which onedata user mapping should be set. 
     * @param {Number} username The ACL name of the user on the storage. 
     * @param {module:model/LumaOnedataUser} lumaOnedataUser Credentials identifying user in the Onedata system.
     * @param {module:api/LUMADBLocalFeedApi~localFeedSetAclUserToOnedataUserMappingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.localFeedSetAclUserToOnedataUserMapping = function(id, username, lumaOnedataUser, callback) {
      var postBody = lumaOnedataUser;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling localFeedSetAclUserToOnedataUserMapping");
      }

      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling localFeedSetAclUserToOnedataUserMapping");
      }

      // verify the required parameter 'lumaOnedataUser' is set
      if (lumaOnedataUser === undefined || lumaOnedataUser === null) {
        throw new Error("Missing the required parameter 'lumaOnedataUser' when calling localFeedSetAclUserToOnedataUserMapping");
      }


      var pathParams = {
        'id': id,
        'username': username
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key1', 'api_key2', 'basic'];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/provider/storages/{id}/luma/local_feed/storage_import/posix_compatible/acl_user_to_onedata_user/{username}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the localFeedSetDefaultPosixCredentials operation.
     * @callback module:api/LUMADBLocalFeedApi~localFeedSetDefaultPosixCredentialsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert default posix credentials into local feed
     * Sets default storage credentials for the space supported by POSIX-compatible storage in local feed. Returns an error if the storage has a different LUMA feed than &#x60;local&#x60;. This endpoint is relevant **only for POSIX compatible storages**. 
     * @param {String} id The Id of a storage constituting space support for which default storage credentials should be set. 
     * @param {String} spaceId The Id of a space constituting space support for which default storage credentials should be set. 
     * @param {module:model/PosixCompatibleCredentials} posixCredentials New default storage credentials for the space support. 
     * @param {module:api/LUMADBLocalFeedApi~localFeedSetDefaultPosixCredentialsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.localFeedSetDefaultPosixCredentials = function(id, spaceId, posixCredentials, callback) {
      var postBody = posixCredentials;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling localFeedSetDefaultPosixCredentials");
      }

      // verify the required parameter 'spaceId' is set
      if (spaceId === undefined || spaceId === null) {
        throw new Error("Missing the required parameter 'spaceId' when calling localFeedSetDefaultPosixCredentials");
      }

      // verify the required parameter 'posixCredentials' is set
      if (posixCredentials === undefined || posixCredentials === null) {
        throw new Error("Missing the required parameter 'posixCredentials' when calling localFeedSetDefaultPosixCredentials");
      }


      var pathParams = {
        'id': id,
        'space_id': spaceId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key1', 'api_key2', 'basic'];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/provider/storages/{id}/luma/local_feed/storage_access/posix_compatible/default_credentials/{space_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the localFeedSetDisplayCredentials operation.
     * @callback module:api/LUMADBLocalFeedApi~localFeedSetDisplayCredentialsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert default display credentials into local feed
     * Sets default display credentials for the space support in local feed. Returns an error if the storage has a different LUMA feed than &#x60;local&#x60;. 
     * @param {String} id The Id of a storage constituting space support for which default display credentials should be set. 
     * @param {String} spaceId The Id of a space constituting space support for which default display credentials should be set. 
     * @param {module:model/PosixCompatibleCredentials} displayCredentials New default display credentials for the space support. 
     * @param {module:api/LUMADBLocalFeedApi~localFeedSetDisplayCredentialsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.localFeedSetDisplayCredentials = function(id, spaceId, displayCredentials, callback) {
      var postBody = displayCredentials;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling localFeedSetDisplayCredentials");
      }

      // verify the required parameter 'spaceId' is set
      if (spaceId === undefined || spaceId === null) {
        throw new Error("Missing the required parameter 'spaceId' when calling localFeedSetDisplayCredentials");
      }

      // verify the required parameter 'displayCredentials' is set
      if (displayCredentials === undefined || displayCredentials === null) {
        throw new Error("Missing the required parameter 'displayCredentials' when calling localFeedSetDisplayCredentials");
      }


      var pathParams = {
        'id': id,
        'space_id': spaceId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key1', 'api_key2', 'basic'];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/provider/storages/{id}/luma/local_feed/display_credentials/all/default/{space_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the localFeedSetUidToOnedataUserMapping operation.
     * @callback module:api/LUMADBLocalFeedApi~localFeedSetUidToOnedataUserMappingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert mapping of UID into local feed
     * Sets mapping of UID on the specific storage to Onedata user in local feed. Returns an error if the storage has a different LUMA feed than &#x60;local&#x60;. This endpoint is relevant **only for POSIX compatible storages**. 
     * @param {String} id The Id of a storage constituting space support for which onedata user mapping should be set. 
     * @param {Number} uid The UID of the user on the storage. 
     * @param {module:model/LumaOnedataUser} lumaOnedataUser Credentials identifying user in the Onedata system.
     * @param {module:api/LUMADBLocalFeedApi~localFeedSetUidToOnedataUserMappingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.localFeedSetUidToOnedataUserMapping = function(id, uid, lumaOnedataUser, callback) {
      var postBody = lumaOnedataUser;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling localFeedSetUidToOnedataUserMapping");
      }

      // verify the required parameter 'uid' is set
      if (uid === undefined || uid === null) {
        throw new Error("Missing the required parameter 'uid' when calling localFeedSetUidToOnedataUserMapping");
      }

      // verify the required parameter 'lumaOnedataUser' is set
      if (lumaOnedataUser === undefined || lumaOnedataUser === null) {
        throw new Error("Missing the required parameter 'lumaOnedataUser' when calling localFeedSetUidToOnedataUserMapping");
      }


      var pathParams = {
        'id': id,
        'uid': uid
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key1', 'api_key2', 'basic'];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/provider/storages/{id}/luma/local_feed/storage_import/posix_compatible/uid_to_onedata_user/{uid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
