/**
 * Onepanel
 * # Overview  This is the RESTful API definition of **Onepanel** component of Onedata data management system [onedata.org](http://www.onedata.org).  > This API is defined using [Swagger](http://swagger.io/), the JSON specification can be used to automatically generate > client libraries - [swagger.json](../../../swagger/onepanel/swagger.json).  This API allows control and configuration of local Onedata deployment, in particular full control over the **Onezone** and **Oneprovider** services and their distribution and monitoring on the local resources.  Each of these components is composed of the following services:   * **Worker services** - these are available under `/zone/workers` and `/provider/workers` paths,   * **Databases services** - each Onedata component stores it's metadata in a Couchbase backend, which can be distributed on any number of nodes, these are available under `/zone/databases` and `/provider/databases` paths,   * **Cluster manager services** - this is a service which controls other deployed processes in one site, these are availables under these are available under `/zone/managers` and `/provider/managers` paths.  **Onezone** and **Oneprovider** components are composed of 3 types of services: **managers**, **databases** and **workers**.  Using this API each of these components can be deployed, configured, started and stopped on a specified host in the local site, in the context of either **Onezone** or **Oneprovider** service.  All paths listed in this documentation are relative to the base Onepanel REST API which is `/api/v3/onepanel`, so complete URL for a request to Onepanel service is:  ``` http://HOSTNAME:PORT/api/v3/onepanel/... ```  ## Authentication Onepanel supports only HTTP basic authentication, i.e. using `username` and `password`, which were set when creating users.  Onepanel users can have 2 roles:   * **admin** - Onepanel administrator, there can be multiple administrators and all have equal rights in terms of Onedata deployment management,   * **regular** - this role allows manual creation of user accounts, using which users can login to Onezone service using HTTP Basic authentication without OpenID. This role makes sense only on Onepanel which manages Onezone deployment.  The first user account which is created in Onepanel is always an `admin` account.  ## API structure The Onepanel API is structured to reflect that it can either be used to control **Onezone** or **Oneprovider** deployment, each Onedata component deployment has a separate Onepanel instance. In order to make the API calls explicit, **Onezone** or **Oneprovider** specific requests have different paths, i.e.:   * Onezone specific operations start with `/api/v3/onepanel/zone/`   * Oneprovider specific operations start with `/api/v3/onepanel/provider/`   * Common operations paths include `/api/v3/onepanel/users`, `/api/v3/onepanel/hosts` and `/api/v3/onepanel/tasks`  The overall configuration of each component can be controlled by updating `/api/v3/onepanel/zone/configuration` and `/api/v3/onepanel/provider/configuration` resources.  ## Examples Below are some example requests to Onepanel using cURL:  **Create new user** ```bash curl -X POST -k -vvv -H \"content-type: application/json\" \\ -d '{\"username\": \"admin\", \"password\": \"Password1\", \"userRole\": \"admin\"}' \\ https://172.17.0.6:9443/api/v3/onepanel/users ```  **Add storage resource to provider** ```bash curl -X PUT -u admin:Password1 -k -vvv -H \"content-type: application/json\" \\ -d '{\"NFS\": {\"type\": \"posix\", \"mountPoint\": \"/mnt/vfs\"}}' \\ https://172.17.0.4:9443/api/v3/onepanel/provider/storages ```  **Add a new Onezone worker** ```bash curl -X PUT -u admin:Password1 -k -vvv -H \"content-type: application/json\" \\ -d '{\"hosts\": [\"node1.p1.1.dev\"]}' \\ https://172.17.0.4:9443/api/v3/onepanel/zone/workers ``` 
 *
 * OpenAPI spec version: 3.0.0-rc9
 * Contact: info@onedata.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Onepanel);
  }
}(this, function(expect, Onepanel) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Onepanel.OneproviderApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('OneproviderApi', function() {
    describe('deleteProvider', function() {
      it('should call deleteProvider successfully', function(done) {
        //uncomment below and update the code to test deleteProvider
        //instance.deleteProvider(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteProviderSpacesId', function() {
      it('should call deleteProviderSpacesId successfully', function(done) {
        //uncomment below and update the code to test deleteProviderSpacesId
        //instance.deleteProviderSpacesId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getProvider', function() {
      it('should call getProvider successfully', function(done) {
        //uncomment below and update the code to test getProvider
        //instance.getProvider(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getProviderConfiguration', function() {
      it('should call getProviderConfiguration successfully', function(done) {
        //uncomment below and update the code to test getProviderConfiguration
        //instance.getProviderConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getProviderDatabases', function() {
      it('should call getProviderDatabases successfully', function(done) {
        //uncomment below and update the code to test getProviderDatabases
        //instance.getProviderDatabases(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getProviderDatabasesHost', function() {
      it('should call getProviderDatabasesHost successfully', function(done) {
        //uncomment below and update the code to test getProviderDatabasesHost
        //instance.getProviderDatabasesHost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getProviderManagers', function() {
      it('should call getProviderManagers successfully', function(done) {
        //uncomment below and update the code to test getProviderManagers
        //instance.getProviderManagers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getProviderManagersHost', function() {
      it('should call getProviderManagersHost successfully', function(done) {
        //uncomment below and update the code to test getProviderManagersHost
        //instance.getProviderManagersHost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getProviderSpaces', function() {
      it('should call getProviderSpaces successfully', function(done) {
        //uncomment below and update the code to test getProviderSpaces
        //instance.getProviderSpaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getProviderSpacesId', function() {
      it('should call getProviderSpacesId successfully', function(done) {
        //uncomment below and update the code to test getProviderSpacesId
        //instance.getProviderSpacesId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getProviderStorages', function() {
      it('should call getProviderStorages successfully', function(done) {
        //uncomment below and update the code to test getProviderStorages
        //instance.getProviderStorages(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getProviderStoragesName', function() {
      it('should call getProviderStoragesName successfully', function(done) {
        //uncomment below and update the code to test getProviderStoragesName
        //instance.getProviderStoragesName(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getProviderWorkers', function() {
      it('should call getProviderWorkers successfully', function(done) {
        //uncomment below and update the code to test getProviderWorkers
        //instance.getProviderWorkers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getProviderWorkersHost', function() {
      it('should call getProviderWorkersHost successfully', function(done) {
        //uncomment below and update the code to test getProviderWorkersHost
        //instance.getProviderWorkersHost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchProvider', function() {
      it('should call patchProvider successfully', function(done) {
        //uncomment below and update the code to test patchProvider
        //instance.patchProvider(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchProviderDatabases', function() {
      it('should call patchProviderDatabases successfully', function(done) {
        //uncomment below and update the code to test patchProviderDatabases
        //instance.patchProviderDatabases(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchProviderDatabasesHost', function() {
      it('should call patchProviderDatabasesHost successfully', function(done) {
        //uncomment below and update the code to test patchProviderDatabasesHost
        //instance.patchProviderDatabasesHost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchProviderManagers', function() {
      it('should call patchProviderManagers successfully', function(done) {
        //uncomment below and update the code to test patchProviderManagers
        //instance.patchProviderManagers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchProviderManagersHost', function() {
      it('should call patchProviderManagersHost successfully', function(done) {
        //uncomment below and update the code to test patchProviderManagersHost
        //instance.patchProviderManagersHost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchProviderWorkers', function() {
      it('should call patchProviderWorkers successfully', function(done) {
        //uncomment below and update the code to test patchProviderWorkers
        //instance.patchProviderWorkers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchProviderWorkersHost', function() {
      it('should call patchProviderWorkersHost successfully', function(done) {
        //uncomment below and update the code to test patchProviderWorkersHost
        //instance.patchProviderWorkersHost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putProvider', function() {
      it('should call putProvider successfully', function(done) {
        //uncomment below and update the code to test putProvider
        //instance.putProvider(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putProviderConfiguration', function() {
      it('should call putProviderConfiguration successfully', function(done) {
        //uncomment below and update the code to test putProviderConfiguration
        //instance.putProviderConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putProviderDatabases', function() {
      it('should call putProviderDatabases successfully', function(done) {
        //uncomment below and update the code to test putProviderDatabases
        //instance.putProviderDatabases(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putProviderManagers', function() {
      it('should call putProviderManagers successfully', function(done) {
        //uncomment below and update the code to test putProviderManagers
        //instance.putProviderManagers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putProviderSpaces', function() {
      it('should call putProviderSpaces successfully', function(done) {
        //uncomment below and update the code to test putProviderSpaces
        //instance.putProviderSpaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putProviderStorages', function() {
      it('should call putProviderStorages successfully', function(done) {
        //uncomment below and update the code to test putProviderStorages
        //instance.putProviderStorages(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putProviderWorkers', function() {
      it('should call putProviderWorkers successfully', function(done) {
        //uncomment below and update the code to test putProviderWorkers
        //instance.putProviderWorkers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
