/**
 * Onepanel
 * # Overview  This is the RESTful API definition of **Onepanel** component of Onedata data management system [onedata.org](http://onedata.org).  > This API is defined using [Swagger](http://swagger.io/), the JSON specification can be used to automatically generate client libraries -   [swagger.json](../../../swagger/onepanel/swagger.json).  This API allows control and configuration of local Onedata deployment, in particular full control over the **Onezone** and **Oneprovider** services and their distribution and monitoring on the local resources.  The API is grouped into 3 categories of operations:   * **Onepanel** - for common operations   * **Oneprovider** - for Oneprovider specific administrative operations   * **Onezone** - for Onezone specific administrative operations  Each of these components is composed of the following services:   * **Worker services** - these are available under `/zone/workers` and     `/provider/workers` paths,   * **Databases services** - each Onedata component stores it's metadata in a     Couchbase backend, which can be distributed on any number of nodes, these     are available under `/zone/databases` and `/provider/databases` paths,   * **Cluster manager services** - this is a service which controls other     deployed processes in one site, these are availables under these are     available under `/zone/managers` and `/provider/managers` paths.  **Onezone** and **Oneprovider** components are composed of 3 types of services: **managers**, **databases** and **workers**.  Using this API each of these components can be deployed, configured, started and stopped on a specified host in the local site, in the context of either **Onezone** or **Oneprovider** service.  All paths listed in this documentation are relative to the base Onepanel REST API which is `/api/v3/onepanel`, so complete URL for a request to Onepanel service is:  ``` http://HOSTNAME:PORT/api/v3/onepanel/... ```  ## Authentication  ### Token authentication  The recommended, safest way of authenticating requests to Onepanel API is using the **Onedata access tokens**. The token should be present in `X-Auth-Token` or `Authorization: Bearer` header. See [Onezone documentation](/#/home/api/latest/onezone?anchor=section/Overview/Authentication-and-authorization) for detailed explanation of the token concepts.  Curl examples: ```bash curl -H \"X-Auth-Token: $TOKEN\" [...] curl -H \"Authorization: Bearer $TOKEN\" [...] curl -H \"Macaroon: $TOKEN\" [...]   # DEPRECATED ```   ### Passphrase authentication  The token authentication dependes on the Onezone service. In special cases - during Onezone deployment or its outage - it is necessary to use the local **emergency passphrase**.  The passphrase should be provided in a Basic authentication header with username `onepanel`. For curl users this means ```bash curl -u onepanel:TheEmergencyPassphrase ```  The passphrase can also be sent without any username, as the whole content of base64-encoded string in Basic authorization header, e.g. ```bash curl -H \"Authorization: Basic $(echo -n TheEmergencyPassphrase | base64)\" ```  The passphrase is set during deployment. It can be changed in the Onepanel GUI or with an API request: ```bash curl -X PUT 'https://$HOST:9443/api/v3/onepanel/emergency_passphrase' \\ -u onepanel:TheEmergencyPassphrase -H 'Content-Type: application/json' \\ -d '{\"currentPassphrase\": \"TheEmergencyPassphrase\", \"newPassphrase\": \"TheNewPassphrase\"}' ```  ## API structure  The Onepanel API is structured to reflect that it can either be used to control **Onezone** or **Oneprovider** deployment, each Onedata component deployment has a separate Onepanel instance. In order to make the API calls explicit, **Onezone** or **Oneprovider** specific requests have different paths, i.e.:   * Onezone specific operations start with `/api/v3/onepanel/zone/`   * Oneprovider specific operations start with `/api/v3/onepanel/provider/`   * Common operations paths include `/api/v3/onepanel/users`,     `/api/v3/onepanel/hosts` and `/api/v3/onepanel/tasks`  The overall configuration of each component can be controlled by updating `/api/v3/onepanel/zone/configuration` and `/api/v3/onepanel/provider/configuration` resources.  ## Examples  Below are some example requests to Onepanel using cURL:  **Add storage resource to provider** ```bash curl -X POST -u onepanel:Passphrase1 -k -vvv -H \"content-type: application/json\" \\ -d '{\"NFS\": {\"type\": \"posix\", \"mountPoint\": \"/mnt/vfs\"}}' \\ https://172.17.0.4:9443/api/v3/onepanel/provider/storages ```  **Add a new Onezone worker** ```bash curl -X POST -u onepanel:Passphrase1 -k -vvv -H \"content-type: application/json\" \\ -d '{\"hosts\": [\"node1.p1.1.dev\"]}' \\ https://172.17.0.4:9443/api/v3/onepanel/zone/workers ``` 
 *
 * OpenAPI spec version: 20.02.1
 * Contact: info@onedata.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AutoStorageImportInfo', 'model/AutoStorageImportStats', 'model/Error', 'model/Id', 'model/ManualStorageImportExample', 'model/ProviderSpaces', 'model/SpaceDetails', 'model/SpaceModifyRequest', 'model/SpaceSupportRequest'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AutoStorageImportInfo'), require('../model/AutoStorageImportStats'), require('../model/Error'), require('../model/Id'), require('../model/ManualStorageImportExample'), require('../model/ProviderSpaces'), require('../model/SpaceDetails'), require('../model/SpaceModifyRequest'), require('../model/SpaceSupportRequest'));
  } else {
    // Browser globals (root is window)
    if (!root.Onepanel) {
      root.Onepanel = {};
    }
    root.Onepanel.SpaceSupportApi = factory(root.Onepanel.ApiClient, root.Onepanel.AutoStorageImportInfo, root.Onepanel.AutoStorageImportStats, root.Onepanel.Error, root.Onepanel.Id, root.Onepanel.ManualStorageImportExample, root.Onepanel.ProviderSpaces, root.Onepanel.SpaceDetails, root.Onepanel.SpaceModifyRequest, root.Onepanel.SpaceSupportRequest);
  }
}(this, function(ApiClient, AutoStorageImportInfo, AutoStorageImportStats, Error, Id, ManualStorageImportExample, ProviderSpaces, SpaceDetails, SpaceModifyRequest, SpaceSupportRequest) {
  'use strict';

  /**
   * SpaceSupport service.
   * @module api/SpaceSupportApi
   * @version 20.02.1
   */

  /**
   * Constructs a new SpaceSupportApi. 
   * @alias module:api/SpaceSupportApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the forceStartAutoStorageImportScan operation.
     * @callback module:api/SpaceSupportApi~forceStartAutoStorageImportScanCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Force start auto storage import scan
     * Forcefully starts scan of auto storage import mechanism in given space.
     * @param {String} id The Id of a space.
     * @param {module:api/SpaceSupportApi~forceStartAutoStorageImportScanCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.forceStartAutoStorageImportScan = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling forceStartAutoStorageImportScan");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key1', 'api_key2', 'basic'];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/provider/spaces/{id}/storage-import/auto/force-start', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the forceStopAutoStorageImportScan operation.
     * @callback module:api/SpaceSupportApi~forceStopAutoStorageImportScanCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Force stop auto storage import scan
     * Forcefully stops current scan of auto storage import mechanism in given space.
     * @param {String} id The Id of a space.
     * @param {module:api/SpaceSupportApi~forceStopAutoStorageImportScanCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.forceStopAutoStorageImportScan = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling forceStopAutoStorageImportScan");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key1', 'api_key2', 'basic'];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/provider/spaces/{id}/storage-import/auto/force-stop', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAutoStorageImportInfo operation.
     * @callback module:api/SpaceSupportApi~getAutoStorageImportInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AutoStorageImportInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get information about auto storage import scan
     * Returns information about current or last finished auto storage import scan.
     * @param {String} id The Id of a space for which storage import stats should be returned.
     * @param {module:api/SpaceSupportApi~getAutoStorageImportInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AutoStorageImportInfo}
     */
    this.getAutoStorageImportInfo = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAutoStorageImportInfo");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key1', 'api_key2', 'basic'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = AutoStorageImportInfo;

      return this.apiClient.callApi(
        '/provider/spaces/{id}/storage-import/auto/info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAutoStorageImportStats operation.
     * @callback module:api/SpaceSupportApi~getAutoStorageImportStatsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AutoStorageImportStats} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get statistics of auto storage import mechanism.
     * Returns requested statistics of auto storage import mechanism for given space on this provider. 
     * @param {String} id The Id of a space for which storage import stats should be returned.
     * @param {module:model/String} period Predefined time period for which the statistics should be fetched.
     * @param {String} metrics Specify which statistic metrics should be returned - strings delimited with comma. Accepted values are: &#x60;queueLength&#x60;, &#x60;createdFiles&#x60;, &#x60;modifiedFiles&#x60;, &#x60;deletedFiles&#x60; 
     * @param {module:api/SpaceSupportApi~getAutoStorageImportStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AutoStorageImportStats}
     */
    this.getAutoStorageImportStats = function(id, period, metrics, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAutoStorageImportStats");
      }

      // verify the required parameter 'period' is set
      if (period === undefined || period === null) {
        throw new Error("Missing the required parameter 'period' when calling getAutoStorageImportStats");
      }

      // verify the required parameter 'metrics' is set
      if (metrics === undefined || metrics === null) {
        throw new Error("Missing the required parameter 'metrics' when calling getAutoStorageImportStats");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'period': period,
        'metrics': metrics
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key1', 'api_key2', 'basic'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = AutoStorageImportStats;

      return this.apiClient.callApi(
        '/provider/spaces/{id}/storage-import/auto/stats', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getManualStorageImportExample operation.
     * @callback module:api/SpaceSupportApi~getManualStorageImportExampleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManualStorageImportExample} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get manual storage import example
     * Returns example &#x60;curl&#x60; command that can be executed to manually import (register) file from storage.  The command is filled with correct host of the Oneprovider, space and storage ids. In order to execute the command, user must set 3 variables:  * &#x60;TOKEN&#x60; - Onedata access token.  * &#x60;STORAGE_FILE_ID&#x60; - Identifier of the file on storage, relevant for given storage backend:    * path on POSIX-compatible or canonical object storages, e.g. /dir/file.txt,    * URL on HTTP based storages, e.g. https://www.example.org/data/21/run123.tar.  * &#x60;DESTINATION_PATH&#x60; - An absolute path in space where file should be created.  For more info please read: https://onedata.org/#/home/api/stable/oneprovider?anchor&#x3D;tag/File-registration 
     * @param {String} id The Id of a space for which the example command should be generated.
     * @param {module:api/SpaceSupportApi~getManualStorageImportExampleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManualStorageImportExample}
     */
    this.getManualStorageImportExample = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getManualStorageImportExample");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key1', 'api_key2', 'basic'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ManualStorageImportExample;

      return this.apiClient.callApi(
        '/provider/spaces/{id}/storage-import/manual/example', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getProviderSpaces operation.
     * @callback module:api/SpaceSupportApi~getProviderSpacesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProviderSpaces} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get provider spaces
     * Returns the list of spaces supported by the provider.
     * @param {module:api/SpaceSupportApi~getProviderSpacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProviderSpaces}
     */
    this.getProviderSpaces = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key1', 'api_key2', 'basic'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ProviderSpaces;

      return this.apiClient.callApi(
        '/provider/spaces', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSpaceDetails operation.
     * @callback module:api/SpaceSupportApi~getSpaceDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpaceDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get space details
     * Returns details of space specified by space Id in the path. 
     * @param {String} id The Id of a space which details should be returned.
     * @param {module:api/SpaceSupportApi~getSpaceDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpaceDetails}
     */
    this.getSpaceDetails = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSpaceDetails");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key1', 'api_key2', 'basic'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = SpaceDetails;

      return this.apiClient.callApi(
        '/provider/spaces/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the modifySpace operation.
     * @callback module:api/SpaceSupportApi~modifySpaceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modify space details
     * Modifies the space import/update strategies.
     * @param {String} id The Id of a space which details should be modified.
     * @param {module:model/SpaceModifyRequest} spaceModifyRequest 
     * @param {module:api/SpaceSupportApi~modifySpaceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.modifySpace = function(id, spaceModifyRequest, callback) {
      var postBody = spaceModifyRequest;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling modifySpace");
      }

      // verify the required parameter 'spaceModifyRequest' is set
      if (spaceModifyRequest === undefined || spaceModifyRequest === null) {
        throw new Error("Missing the required parameter 'spaceModifyRequest' when calling modifySpace");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key1', 'api_key2', 'basic'];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/provider/spaces/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the revokeSpaceSupport operation.
     * @callback module:api/SpaceSupportApi~revokeSpaceSupportCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Revoke space support for a space
     * Allows provider to revoke storage support for a specific space. Users with access to this space will no longer be able to store data on the resources of this provider. 
     * @param {String} id The Id of a space to be removed.
     * @param {module:api/SpaceSupportApi~revokeSpaceSupportCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.revokeSpaceSupport = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling revokeSpaceSupport");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key1', 'api_key2', 'basic'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/provider/spaces/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the supportSpace operation.
     * @callback module:api/SpaceSupportApi~supportSpaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Id} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Support space
     * Supports an existing space. 
     * @param {module:model/SpaceSupportRequest} spaceSupportRequest Specification of the space support request including support size and token. 
     * @param {module:api/SpaceSupportApi~supportSpaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Id}
     */
    this.supportSpace = function(spaceSupportRequest, callback) {
      var postBody = spaceSupportRequest;

      // verify the required parameter 'spaceSupportRequest' is set
      if (spaceSupportRequest === undefined || spaceSupportRequest === null) {
        throw new Error("Missing the required parameter 'spaceSupportRequest' when calling supportSpace");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key1', 'api_key2', 'basic'];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = Id;

      return this.apiClient.callApi(
        '/provider/spaces', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
